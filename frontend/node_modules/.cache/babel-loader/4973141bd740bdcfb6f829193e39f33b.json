{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/* eslint-disable import/prefer-default-export */\n\nimport { defaultConfig, useToken as useInternalToken } from '.';\nimport defaultAlgorithm from './themes/default';\nimport darkAlgorithm from './themes/dark';\nimport compactAlgorithm from './themes/compact'; // ZombieJ: We export as object to user but array in internal.\n// This is used to minimize the bundle size for antd package but safe to refactor as object also.\n// Please do not export internal `useToken` directly to avoid something export unexpected.\n\n/** Get current context Design Token. Will be different if you using nest theme config. */\n\nfunction useToken() {\n  var _useInternalToken = useInternalToken(),\n      _useInternalToken2 = _slicedToArray(_useInternalToken, 3),\n      theme = _useInternalToken2[0],\n      token = _useInternalToken2[1],\n      hashId = _useInternalToken2[2];\n\n  return {\n    theme: theme,\n    token: token,\n    hashId: hashId\n  };\n}\n\nexport default {\n  /** @private Test Usage. Do not use in production. */\n  defaultConfig: defaultConfig,\n\n  /** Default seedToken */\n  defaultSeed: defaultConfig.token,\n  useToken: useToken,\n  defaultAlgorithm: defaultAlgorithm,\n  darkAlgorithm: darkAlgorithm,\n  compactAlgorithm: compactAlgorithm\n};","map":{"version":3,"sources":["E:/railway/expressjs-mongoose/frontend/node_modules/antd/es/theme/export.js"],"names":["_slicedToArray","defaultConfig","useToken","useInternalToken","defaultAlgorithm","darkAlgorithm","compactAlgorithm","_useInternalToken","_useInternalToken2","theme","token","hashId","defaultSeed"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,0CAA3B;AACA;;AACA,SAASC,aAAT,EAAwBC,QAAQ,IAAIC,gBAApC,QAA4D,GAA5D;AACA,OAAOC,gBAAP,MAA6B,kBAA7B;AACA,OAAOC,aAAP,MAA0B,eAA1B;AACA,OAAOC,gBAAP,MAA6B,kBAA7B,C,CACA;AACA;AACA;;AACA;;AACA,SAASJ,QAAT,GAAoB;AAClB,MAAIK,iBAAiB,GAAGJ,gBAAgB,EAAxC;AAAA,MACEK,kBAAkB,GAAGR,cAAc,CAACO,iBAAD,EAAoB,CAApB,CADrC;AAAA,MAEEE,KAAK,GAAGD,kBAAkB,CAAC,CAAD,CAF5B;AAAA,MAGEE,KAAK,GAAGF,kBAAkB,CAAC,CAAD,CAH5B;AAAA,MAIEG,MAAM,GAAGH,kBAAkB,CAAC,CAAD,CAJ7B;;AAKA,SAAO;AACLC,IAAAA,KAAK,EAAEA,KADF;AAELC,IAAAA,KAAK,EAAEA,KAFF;AAGLC,IAAAA,MAAM,EAAEA;AAHH,GAAP;AAKD;;AACD,eAAe;AACb;AACAV,EAAAA,aAAa,EAAEA,aAFF;;AAGb;AACAW,EAAAA,WAAW,EAAEX,aAAa,CAACS,KAJd;AAKbR,EAAAA,QAAQ,EAAEA,QALG;AAMbE,EAAAA,gBAAgB,EAAEA,gBANL;AAObC,EAAAA,aAAa,EAAEA,aAPF;AAQbC,EAAAA,gBAAgB,EAAEA;AARL,CAAf","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/* eslint-disable import/prefer-default-export */\nimport { defaultConfig, useToken as useInternalToken } from '.';\nimport defaultAlgorithm from './themes/default';\nimport darkAlgorithm from './themes/dark';\nimport compactAlgorithm from './themes/compact';\n// ZombieJ: We export as object to user but array in internal.\n// This is used to minimize the bundle size for antd package but safe to refactor as object also.\n// Please do not export internal `useToken` directly to avoid something export unexpected.\n/** Get current context Design Token. Will be different if you using nest theme config. */\nfunction useToken() {\n  var _useInternalToken = useInternalToken(),\n    _useInternalToken2 = _slicedToArray(_useInternalToken, 3),\n    theme = _useInternalToken2[0],\n    token = _useInternalToken2[1],\n    hashId = _useInternalToken2[2];\n  return {\n    theme: theme,\n    token: token,\n    hashId: hashId\n  };\n}\nexport default {\n  /** @private Test Usage. Do not use in production. */\n  defaultConfig: defaultConfig,\n  /** Default seedToken */\n  defaultSeed: defaultConfig.token,\n  useToken: useToken,\n  defaultAlgorithm: defaultAlgorithm,\n  darkAlgorithm: darkAlgorithm,\n  compactAlgorithm: compactAlgorithm\n};"]},"metadata":{},"sourceType":"module"}