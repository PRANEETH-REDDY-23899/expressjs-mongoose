{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\n\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigConsumer } from '../config-provider';\nimport Select from '../select';\nimport genPurePanel from '../_util/PurePanel';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nvar Option = Select.Option;\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nvar AutoComplete = function AutoComplete(props, ref) {\n  var customizePrefixCls = props.prefixCls,\n      className = props.className,\n      popupClassName = props.popupClassName,\n      dropdownClassName = props.dropdownClassName,\n      children = props.children,\n      dataSource = props.dataSource;\n  var childNodes = toArray(children); // ============================= Input =============================\n\n  var customizeInput;\n\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    var _childNodes = _slicedToArray(childNodes, 1);\n\n    customizeInput = _childNodes[0];\n  }\n\n  var getInputElement = customizeInput ? function () {\n    return customizeInput;\n  } : undefined; // ============================ Options ============================\n\n  var optionChildren; // [Legacy] convert `children` or `dataSource` into option children\n\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(function (item) {\n      if (isValidElement(item)) {\n        return item;\n      }\n\n      switch (_typeof(item)) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n\n        case 'object':\n          {\n            var optionValue = item.value;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'AutoComplete', '`dropdownClassName` is deprecated, please use `popupClassName` instead.') : void 0;\n  }\n\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\n    var getPrefixCls = _ref.getPrefixCls;\n    var prefixCls = getPrefixCls('select', customizePrefixCls);\n    return /*#__PURE__*/React.createElement(Select, _extends({\n      ref: ref\n    }, omit(props, ['dataSource', 'dropdownClassName']), {\n      prefixCls: prefixCls,\n      popupClassName: popupClassName || dropdownClassName,\n      className: classNames(prefixCls + \"-auto-complete\", className),\n      mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n    }, {\n      // Internal api\n      getInputElement: getInputElement\n    }), optionChildren);\n  });\n};\n\nvar RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete); // We don't care debug panel\n\n/* istanbul ignore next */\n\nvar PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default RefAutoComplete;","map":{"version":3,"sources":["E:/railway/expressjs-mongoose/frontend/node_modules/antd/es/auto-complete/index.js"],"names":["_extends","_typeof","_slicedToArray","classNames","toArray","omit","React","ConfigConsumer","Select","genPurePanel","isValidElement","warning","Option","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","ref","customizePrefixCls","prefixCls","className","popupClassName","dropdownClassName","children","dataSource","childNodes","customizeInput","length","_childNodes","getInputElement","undefined","optionChildren","map","item","createElement","key","value","optionValue","text","process","env","NODE_ENV","_ref","getPrefixCls","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","forwardRef","PurePanel","_InternalPanelDoNotUseOrYouWillBeFired"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigConsumer } from '../config-provider';\nimport Select from '../select';\nimport genPurePanel from '../_util/PurePanel';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nvar Option = Select.Option;\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nvar AutoComplete = function AutoComplete(props, ref) {\n  var customizePrefixCls = props.prefixCls,\n    className = props.className,\n    popupClassName = props.popupClassName,\n    dropdownClassName = props.dropdownClassName,\n    children = props.children,\n    dataSource = props.dataSource;\n  var childNodes = toArray(children);\n  // ============================= Input =============================\n  var customizeInput;\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    var _childNodes = _slicedToArray(childNodes, 1);\n    customizeInput = _childNodes[0];\n  }\n  var getInputElement = customizeInput ? function () {\n    return customizeInput;\n  } : undefined;\n  // ============================ Options ============================\n  var optionChildren;\n  // [Legacy] convert `children` or `dataSource` into option children\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(function (item) {\n      if (isValidElement(item)) {\n        return item;\n      }\n      switch (_typeof(item)) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n        case 'object':\n          {\n            var optionValue = item.value;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'AutoComplete', '`dropdownClassName` is deprecated, please use `popupClassName` instead.') : void 0;\n  }\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\n    var getPrefixCls = _ref.getPrefixCls;\n    var prefixCls = getPrefixCls('select', customizePrefixCls);\n    return /*#__PURE__*/React.createElement(Select, _extends({\n      ref: ref\n    }, omit(props, ['dataSource', 'dropdownClassName']), {\n      prefixCls: prefixCls,\n      popupClassName: popupClassName || dropdownClassName,\n      className: classNames(prefixCls + \"-auto-complete\", className),\n      mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n    }, {\n      // Internal api\n      getInputElement: getInputElement\n    }), optionChildren);\n  });\n};\nvar RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\n// We don't care debug panel\n/* istanbul ignore next */\nvar PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nexport default RefAutoComplete;"]},"metadata":{},"sourceType":"module"}