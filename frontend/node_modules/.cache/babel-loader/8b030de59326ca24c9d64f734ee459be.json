{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar enableStatistic = process.env.NODE_ENV !== 'production' || typeof CSSINJS_STATISTIC !== 'undefined';\nvar recording = true;\n/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */\n\nexport function merge() {\n  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n    objs[_key] = arguments[_key];\n  }\n  /* istanbul ignore next */\n\n\n  if (!enableStatistic) {\n    return _extends.apply(void 0, [{}].concat(objs));\n  }\n\n  recording = false;\n  var ret = {};\n  objs.forEach(function (obj) {\n    var keys = Object.keys(obj);\n    keys.forEach(function (key) {\n      Object.defineProperty(ret, key, {\n        configurable: true,\n        enumerable: true,\n        get: function get() {\n          return obj[key];\n        }\n      });\n    });\n  });\n  recording = true;\n  return ret;\n}\n/** @private Internal Usage. Not use in your production. */\n\nexport var statistic = {};\n/** @private Internal Usage. Not use in your production. */\n// eslint-disable-next-line camelcase\n\nexport var _statistic_build_ = {};\n/* istanbul ignore next */\n\nfunction noop() {}\n/** Statistic token usage case. Should use `merge` function if you do not want spread record. */\n\n\nexport default function statisticToken(token) {\n  var tokenKeys;\n  var proxy = token;\n  var flush = noop;\n\n  if (enableStatistic) {\n    tokenKeys = new Set();\n    proxy = new Proxy(token, {\n      get: function get(obj, prop) {\n        if (recording) {\n          tokenKeys.add(prop);\n        }\n\n        return obj[prop];\n      }\n    });\n\n    flush = function flush(componentName, componentToken) {\n      statistic[componentName] = {\n        global: Array.from(tokenKeys),\n        component: componentToken\n      };\n    };\n  }\n\n  return {\n    token: proxy,\n    keys: tokenKeys,\n    flush: flush\n  };\n}","map":{"version":3,"sources":["E:/railway/expressjs-mongoose/frontend/node_modules/antd/es/theme/util/statistic.js"],"names":["_extends","enableStatistic","process","env","NODE_ENV","CSSINJS_STATISTIC","recording","merge","_len","arguments","length","objs","Array","_key","apply","concat","ret","forEach","obj","keys","Object","key","defineProperty","configurable","enumerable","get","statistic","_statistic_build_","noop","statisticToken","token","tokenKeys","proxy","flush","Set","Proxy","prop","add","componentName","componentToken","global","from","component"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,IAAIC,eAAe,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,OAAOC,iBAAP,KAA6B,WAA5F;AACA,IAAIC,SAAS,GAAG,IAAhB;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,GAAiB;AACtB,OAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;AACvFF,IAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;AACD;;;AACA,MAAI,CAACZ,eAAL,EAAsB;AACpB,WAAOD,QAAQ,CAACc,KAAT,CAAe,KAAK,CAApB,EAAuB,CAAC,EAAD,EAAKC,MAAL,CAAYJ,IAAZ,CAAvB,CAAP;AACD;;AACDL,EAAAA,SAAS,GAAG,KAAZ;AACA,MAAIU,GAAG,GAAG,EAAV;AACAL,EAAAA,IAAI,CAACM,OAAL,CAAa,UAAUC,GAAV,EAAe;AAC1B,QAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,GAAZ,CAAX;AACAC,IAAAA,IAAI,CAACF,OAAL,CAAa,UAAUI,GAAV,EAAe;AAC1BD,MAAAA,MAAM,CAACE,cAAP,CAAsBN,GAAtB,EAA2BK,GAA3B,EAAgC;AAC9BE,QAAAA,YAAY,EAAE,IADgB;AAE9BC,QAAAA,UAAU,EAAE,IAFkB;AAG9BC,QAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,iBAAOP,GAAG,CAACG,GAAD,CAAV;AACD;AAL6B,OAAhC;AAOD,KARD;AASD,GAXD;AAYAf,EAAAA,SAAS,GAAG,IAAZ;AACA,SAAOU,GAAP;AACD;AACD;;AACA,OAAO,IAAIU,SAAS,GAAG,EAAhB;AACP;AACA;;AACA,OAAO,IAAIC,iBAAiB,GAAG,EAAxB;AACP;;AACA,SAASC,IAAT,GAAgB,CAAE;AAClB;;;AACA,eAAe,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC5C,MAAIC,SAAJ;AACA,MAAIC,KAAK,GAAGF,KAAZ;AACA,MAAIG,KAAK,GAAGL,IAAZ;;AACA,MAAI3B,eAAJ,EAAqB;AACnB8B,IAAAA,SAAS,GAAG,IAAIG,GAAJ,EAAZ;AACAF,IAAAA,KAAK,GAAG,IAAIG,KAAJ,CAAUL,KAAV,EAAiB;AACvBL,MAAAA,GAAG,EAAE,SAASA,GAAT,CAAaP,GAAb,EAAkBkB,IAAlB,EAAwB;AAC3B,YAAI9B,SAAJ,EAAe;AACbyB,UAAAA,SAAS,CAACM,GAAV,CAAcD,IAAd;AACD;;AACD,eAAOlB,GAAG,CAACkB,IAAD,CAAV;AACD;AANsB,KAAjB,CAAR;;AAQAH,IAAAA,KAAK,GAAG,SAASA,KAAT,CAAeK,aAAf,EAA8BC,cAA9B,EAA8C;AACpDb,MAAAA,SAAS,CAACY,aAAD,CAAT,GAA2B;AACzBE,QAAAA,MAAM,EAAE5B,KAAK,CAAC6B,IAAN,CAAWV,SAAX,CADiB;AAEzBW,QAAAA,SAAS,EAAEH;AAFc,OAA3B;AAID,KALD;AAMD;;AACD,SAAO;AACLT,IAAAA,KAAK,EAAEE,KADF;AAELb,IAAAA,IAAI,EAAEY,SAFD;AAGLE,IAAAA,KAAK,EAAEA;AAHF,GAAP;AAKD","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar enableStatistic = process.env.NODE_ENV !== 'production' || typeof CSSINJS_STATISTIC !== 'undefined';\nvar recording = true;\n/**\n * This function will do as `Object.assign` in production. But will use Object.defineProperty:get to\n * pass all value access in development. To support statistic field usage with alias token.\n */\nexport function merge() {\n  for (var _len = arguments.length, objs = new Array(_len), _key = 0; _key < _len; _key++) {\n    objs[_key] = arguments[_key];\n  }\n  /* istanbul ignore next */\n  if (!enableStatistic) {\n    return _extends.apply(void 0, [{}].concat(objs));\n  }\n  recording = false;\n  var ret = {};\n  objs.forEach(function (obj) {\n    var keys = Object.keys(obj);\n    keys.forEach(function (key) {\n      Object.defineProperty(ret, key, {\n        configurable: true,\n        enumerable: true,\n        get: function get() {\n          return obj[key];\n        }\n      });\n    });\n  });\n  recording = true;\n  return ret;\n}\n/** @private Internal Usage. Not use in your production. */\nexport var statistic = {};\n/** @private Internal Usage. Not use in your production. */\n// eslint-disable-next-line camelcase\nexport var _statistic_build_ = {};\n/* istanbul ignore next */\nfunction noop() {}\n/** Statistic token usage case. Should use `merge` function if you do not want spread record. */\nexport default function statisticToken(token) {\n  var tokenKeys;\n  var proxy = token;\n  var flush = noop;\n  if (enableStatistic) {\n    tokenKeys = new Set();\n    proxy = new Proxy(token, {\n      get: function get(obj, prop) {\n        if (recording) {\n          tokenKeys.add(prop);\n        }\n        return obj[prop];\n      }\n    });\n    flush = function flush(componentName, componentToken) {\n      statistic[componentName] = {\n        global: Array.from(tokenKeys),\n        component: componentToken\n      };\n    };\n  }\n  return {\n    token: proxy,\n    keys: tokenKeys,\n    flush: flush\n  };\n}"]},"metadata":{},"sourceType":"module"}