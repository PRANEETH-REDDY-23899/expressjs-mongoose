{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport * as React from 'react';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getStrokeColor } from './utils';\nvar CIRCLE_MIN_STROKE_WIDTH = 3;\n\nvar getMinPercent = function getMinPercent(width) {\n  return CIRCLE_MIN_STROKE_WIDTH / width * 100;\n};\n\nvar Circle = function Circle(props) {\n  var prefixCls = props.prefixCls,\n      width = props.width,\n      strokeWidth = props.strokeWidth,\n      _props$trailColor = props.trailColor,\n      trailColor = _props$trailColor === void 0 ? null : _props$trailColor,\n      _props$strokeLinecap = props.strokeLinecap,\n      strokeLinecap = _props$strokeLinecap === void 0 ? 'round' : _props$strokeLinecap,\n      gapPosition = props.gapPosition,\n      gapDegree = props.gapDegree,\n      type = props.type,\n      children = props.children,\n      success = props.success;\n  var circleSize = width || 120;\n  var circleStyle = {\n    width: circleSize,\n    height: circleSize,\n    fontSize: circleSize * 0.15 + 6\n  };\n  var memoizedStrokeWidth = React.useMemo(function () {\n    if (!strokeWidth) {\n      return Math.max(getMinPercent(circleSize), 6);\n    }\n\n    return strokeWidth;\n  }, [circleSize, strokeWidth]);\n  var getGapDegree = React.useMemo(function () {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n\n    if (type === 'dashboard') {\n      return 75;\n    }\n\n    return undefined;\n  }, [gapDegree, type]);\n  var gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined; // using className to style stroke color\n\n  var isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  var strokeColor = getStrokeColor({\n    success: success,\n    strokeColor: props.strokeColor\n  });\n  var wrapperClassName = classNames(prefixCls + \"-inner\", _defineProperty({}, prefixCls + \"-circle-gradient\", isGradient));\n  var circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    percent: getPercentage(props),\n    strokeWidth: memoizedStrokeWidth,\n    trailWidth: memoizedStrokeWidth,\n    strokeColor: strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: getGapDegree,\n    gapPosition: gapPos\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, circleSize <= 20 ? /*#__PURE__*/React.createElement(Tooltip, {\n    title: children\n  }, circleContent) : /*#__PURE__*/React.createElement(React.Fragment, null, circleContent, children));\n};\n\nexport default Circle;","map":{"version":3,"sources":["E:/railway/expressjs-mongoose/frontend/node_modules/antd/es/progress/Circle.js"],"names":["_defineProperty","classNames","Circle","RCCircle","React","Tooltip","getPercentage","getStrokeColor","CIRCLE_MIN_STROKE_WIDTH","getMinPercent","width","props","prefixCls","strokeWidth","_props$trailColor","trailColor","_props$strokeLinecap","strokeLinecap","gapPosition","gapDegree","type","children","success","circleSize","circleStyle","height","fontSize","memoizedStrokeWidth","useMemo","Math","max","getGapDegree","undefined","gapPos","isGradient","Object","prototype","toString","call","strokeColor","wrapperClassName","circleContent","createElement","percent","trailWidth","className","style","title","Fragment"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport classNames from 'classnames';\nimport { Circle as RCCircle } from 'rc-progress';\nimport * as React from 'react';\nimport Tooltip from '../tooltip';\nimport { getPercentage, getStrokeColor } from './utils';\nvar CIRCLE_MIN_STROKE_WIDTH = 3;\nvar getMinPercent = function getMinPercent(width) {\n  return CIRCLE_MIN_STROKE_WIDTH / width * 100;\n};\nvar Circle = function Circle(props) {\n  var prefixCls = props.prefixCls,\n    width = props.width,\n    strokeWidth = props.strokeWidth,\n    _props$trailColor = props.trailColor,\n    trailColor = _props$trailColor === void 0 ? null : _props$trailColor,\n    _props$strokeLinecap = props.strokeLinecap,\n    strokeLinecap = _props$strokeLinecap === void 0 ? 'round' : _props$strokeLinecap,\n    gapPosition = props.gapPosition,\n    gapDegree = props.gapDegree,\n    type = props.type,\n    children = props.children,\n    success = props.success;\n  var circleSize = width || 120;\n  var circleStyle = {\n    width: circleSize,\n    height: circleSize,\n    fontSize: circleSize * 0.15 + 6\n  };\n  var memoizedStrokeWidth = React.useMemo(function () {\n    if (!strokeWidth) {\n      return Math.max(getMinPercent(circleSize), 6);\n    }\n    return strokeWidth;\n  }, [circleSize, strokeWidth]);\n  var getGapDegree = React.useMemo(function () {\n    // Support gapDeg = 0 when type = 'dashboard'\n    if (gapDegree || gapDegree === 0) {\n      return gapDegree;\n    }\n    if (type === 'dashboard') {\n      return 75;\n    }\n    return undefined;\n  }, [gapDegree, type]);\n  var gapPos = gapPosition || type === 'dashboard' && 'bottom' || undefined;\n  // using className to style stroke color\n  var isGradient = Object.prototype.toString.call(props.strokeColor) === '[object Object]';\n  var strokeColor = getStrokeColor({\n    success: success,\n    strokeColor: props.strokeColor\n  });\n  var wrapperClassName = classNames(prefixCls + \"-inner\", _defineProperty({}, prefixCls + \"-circle-gradient\", isGradient));\n  var circleContent = /*#__PURE__*/React.createElement(RCCircle, {\n    percent: getPercentage(props),\n    strokeWidth: memoizedStrokeWidth,\n    trailWidth: memoizedStrokeWidth,\n    strokeColor: strokeColor,\n    strokeLinecap: strokeLinecap,\n    trailColor: trailColor,\n    prefixCls: prefixCls,\n    gapDegree: getGapDegree,\n    gapPosition: gapPos\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: wrapperClassName,\n    style: circleStyle\n  }, circleSize <= 20 ? /*#__PURE__*/React.createElement(Tooltip, {\n    title: children\n  }, circleContent) : /*#__PURE__*/React.createElement(React.Fragment, null, circleContent, children));\n};\nexport default Circle;"]},"metadata":{},"sourceType":"module"}