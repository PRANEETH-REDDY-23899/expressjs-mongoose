{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport * as React from 'react';\n\nfunction UnitNumber(_ref) {\n  var prefixCls = _ref.prefixCls,\n      value = _ref.value,\n      current = _ref.current,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? 0 : _ref$offset;\n  var style;\n\n  if (offset) {\n    style = {\n      position: 'absolute',\n      top: offset + \"00%\",\n      left: 0\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: style,\n    className: classNames(prefixCls + \"-only-unit\", {\n      current: current\n    })\n  }, value);\n}\n\nfunction getOffset(start, end, unit) {\n  var index = start;\n  var offset = 0;\n\n  while ((index + 10) % 10 !== end) {\n    index += unit;\n    offset += unit;\n  }\n\n  return offset;\n}\n\nexport default function SingleNumber(props) {\n  var prefixCls = props.prefixCls,\n      originCount = props.count,\n      originValue = props.value;\n  var value = Number(originValue);\n  var count = Math.abs(originCount);\n\n  var _React$useState = React.useState(value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      prevValue = _React$useState2[0],\n      setPrevValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(count),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      prevCount = _React$useState4[0],\n      setPrevCount = _React$useState4[1]; // ============================= Events =============================\n\n\n  var onTransitionEnd = function onTransitionEnd() {\n    setPrevValue(value);\n    setPrevCount(count);\n  }; // Fallback if transition event not support\n\n\n  React.useEffect(function () {\n    var timeout = setTimeout(function () {\n      onTransitionEnd();\n    }, 1000);\n    return function () {\n      clearTimeout(timeout);\n    };\n  }, [value]); // ============================= Render =============================\n  // Render unit list\n\n  var unitNodes;\n  var offsetStyle;\n\n  if (prevValue === value || Number.isNaN(value) || Number.isNaN(prevValue)) {\n    // Nothing to change\n    unitNodes = [/*#__PURE__*/React.createElement(UnitNumber, _extends({}, props, {\n      key: value,\n      current: true\n    }))];\n    offsetStyle = {\n      transition: 'none'\n    };\n  } else {\n    unitNodes = []; // Fill basic number units\n\n    var end = value + 10;\n    var unitNumberList = [];\n\n    for (var index = value; index <= end; index += 1) {\n      unitNumberList.push(index);\n    } // Fill with number unit nodes\n\n\n    var prevIndex = unitNumberList.findIndex(function (n) {\n      return n % 10 === prevValue;\n    });\n    unitNodes = unitNumberList.map(function (n, index) {\n      var singleUnit = n % 10;\n      return /*#__PURE__*/React.createElement(UnitNumber, _extends({}, props, {\n        key: n,\n        value: singleUnit,\n        offset: index - prevIndex,\n        current: index === prevIndex\n      }));\n    }); // Calculate container offset value\n\n    var unit = prevCount < count ? 1 : -1;\n    offsetStyle = {\n      transform: \"translateY(\" + -getOffset(prevValue, value, unit) + \"00%)\"\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: prefixCls + \"-only\",\n    style: offsetStyle,\n    onTransitionEnd: onTransitionEnd\n  }, unitNodes);\n}","map":{"version":3,"sources":["E:/railway/expressjs-mongoose/frontend/node_modules/antd/es/badge/SingleNumber.js"],"names":["_extends","_slicedToArray","classNames","React","UnitNumber","_ref","prefixCls","value","current","_ref$offset","offset","style","position","top","left","createElement","className","getOffset","start","end","unit","index","SingleNumber","props","originCount","count","originValue","Number","Math","abs","_React$useState","useState","_React$useState2","prevValue","setPrevValue","_React$useState3","_React$useState4","prevCount","setPrevCount","onTransitionEnd","useEffect","timeout","setTimeout","clearTimeout","unitNodes","offsetStyle","isNaN","key","transition","unitNumberList","push","prevIndex","findIndex","n","map","singleUnit","transform"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nfunction UnitNumber(_ref) {\n  var prefixCls = _ref.prefixCls,\n    value = _ref.value,\n    current = _ref.current,\n    _ref$offset = _ref.offset,\n    offset = _ref$offset === void 0 ? 0 : _ref$offset;\n  var style;\n  if (offset) {\n    style = {\n      position: 'absolute',\n      top: offset + \"00%\",\n      left: 0\n    };\n  }\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: style,\n    className: classNames(prefixCls + \"-only-unit\", {\n      current: current\n    })\n  }, value);\n}\nfunction getOffset(start, end, unit) {\n  var index = start;\n  var offset = 0;\n  while ((index + 10) % 10 !== end) {\n    index += unit;\n    offset += unit;\n  }\n  return offset;\n}\nexport default function SingleNumber(props) {\n  var prefixCls = props.prefixCls,\n    originCount = props.count,\n    originValue = props.value;\n  var value = Number(originValue);\n  var count = Math.abs(originCount);\n  var _React$useState = React.useState(value),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    prevValue = _React$useState2[0],\n    setPrevValue = _React$useState2[1];\n  var _React$useState3 = React.useState(count),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    prevCount = _React$useState4[0],\n    setPrevCount = _React$useState4[1];\n  // ============================= Events =============================\n  var onTransitionEnd = function onTransitionEnd() {\n    setPrevValue(value);\n    setPrevCount(count);\n  };\n  // Fallback if transition event not support\n  React.useEffect(function () {\n    var timeout = setTimeout(function () {\n      onTransitionEnd();\n    }, 1000);\n    return function () {\n      clearTimeout(timeout);\n    };\n  }, [value]);\n  // ============================= Render =============================\n  // Render unit list\n  var unitNodes;\n  var offsetStyle;\n  if (prevValue === value || Number.isNaN(value) || Number.isNaN(prevValue)) {\n    // Nothing to change\n    unitNodes = [/*#__PURE__*/React.createElement(UnitNumber, _extends({}, props, {\n      key: value,\n      current: true\n    }))];\n    offsetStyle = {\n      transition: 'none'\n    };\n  } else {\n    unitNodes = [];\n    // Fill basic number units\n    var end = value + 10;\n    var unitNumberList = [];\n    for (var index = value; index <= end; index += 1) {\n      unitNumberList.push(index);\n    }\n    // Fill with number unit nodes\n    var prevIndex = unitNumberList.findIndex(function (n) {\n      return n % 10 === prevValue;\n    });\n    unitNodes = unitNumberList.map(function (n, index) {\n      var singleUnit = n % 10;\n      return /*#__PURE__*/React.createElement(UnitNumber, _extends({}, props, {\n        key: n,\n        value: singleUnit,\n        offset: index - prevIndex,\n        current: index === prevIndex\n      }));\n    });\n    // Calculate container offset value\n    var unit = prevCount < count ? 1 : -1;\n    offsetStyle = {\n      transform: \"translateY(\" + -getOffset(prevValue, value, unit) + \"00%)\"\n    };\n  }\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: prefixCls + \"-only\",\n    style: offsetStyle,\n    onTransitionEnd: onTransitionEnd\n  }, unitNodes);\n}"]},"metadata":{},"sourceType":"module"}