{"ast":null,"code":"/* eslint-disable import/prefer-default-export, prefer-destructuring */\nimport { generate } from '@ant-design/colors';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport canUseDom from \"rc-util/es/Dom/canUseDom\";\nimport { updateCSS } from \"rc-util/es/Dom/dynamicCSS\";\nimport warning from '../_util/warning';\nvar dynamicStyleMark = \"-ant-\" + Date.now() + \"-\" + Math.random();\nexport function getStyle(globalPrefixCls, theme) {\n  var variables = {};\n\n  var formatColor = function formatColor(color, updater) {\n    var clone = color.clone();\n    clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;\n    return clone.toRgbString();\n  };\n\n  var fillColor = function fillColor(colorVal, type) {\n    var baseColor = new TinyColor(colorVal);\n    var colorPalettes = generate(baseColor.toRgbString());\n    variables[type + \"-color\"] = formatColor(baseColor);\n    variables[type + \"-color-disabled\"] = colorPalettes[1];\n    variables[type + \"-color-hover\"] = colorPalettes[4];\n    variables[type + \"-color-active\"] = colorPalettes[6];\n    variables[type + \"-color-outline\"] = baseColor.clone().setAlpha(0.2).toRgbString();\n    variables[type + \"-color-deprecated-bg\"] = colorPalettes[0];\n    variables[type + \"-color-deprecated-border\"] = colorPalettes[2];\n  }; // ================ Primary Color ================\n\n\n  if (theme.primaryColor) {\n    fillColor(theme.primaryColor, 'primary');\n    var primaryColor = new TinyColor(theme.primaryColor);\n    var primaryColors = generate(primaryColor.toRgbString()); // Legacy - We should use semantic naming standard\n\n    primaryColors.forEach(function (color, index) {\n      variables[\"primary-\" + (index + 1)] = color;\n    }); // Deprecated\n\n    variables['primary-color-deprecated-l-35'] = formatColor(primaryColor, function (c) {\n      return c.lighten(35);\n    });\n    variables['primary-color-deprecated-l-20'] = formatColor(primaryColor, function (c) {\n      return c.lighten(20);\n    });\n    variables['primary-color-deprecated-t-20'] = formatColor(primaryColor, function (c) {\n      return c.tint(20);\n    });\n    variables['primary-color-deprecated-t-50'] = formatColor(primaryColor, function (c) {\n      return c.tint(50);\n    });\n    variables['primary-color-deprecated-f-12'] = formatColor(primaryColor, function (c) {\n      return c.setAlpha(c.getAlpha() * 0.12);\n    });\n    var primaryActiveColor = new TinyColor(primaryColors[0]);\n    variables['primary-color-active-deprecated-f-30'] = formatColor(primaryActiveColor, function (c) {\n      return c.setAlpha(c.getAlpha() * 0.3);\n    });\n    variables['primary-color-active-deprecated-d-02'] = formatColor(primaryActiveColor, function (c) {\n      return c.darken(2);\n    });\n  } // ================ Success Color ================\n\n\n  if (theme.successColor) {\n    fillColor(theme.successColor, 'success');\n  } // ================ Warning Color ================\n\n\n  if (theme.warningColor) {\n    fillColor(theme.warningColor, 'warning');\n  } // ================= Error Color =================\n\n\n  if (theme.errorColor) {\n    fillColor(theme.errorColor, 'error');\n  } // ================= Info Color ==================\n\n\n  if (theme.infoColor) {\n    fillColor(theme.infoColor, 'info');\n  } // Convert to css variables\n\n\n  var cssList = Object.keys(variables).map(function (key) {\n    return \"--\" + globalPrefixCls + \"-\" + key + \": \" + variables[key] + \";\";\n  });\n  return (\"\\n  :root {\\n    \" + cssList.join('\\n') + \"\\n  }\\n  \").trim();\n}\nexport function registerTheme(globalPrefixCls, theme) {\n  var style = getStyle(globalPrefixCls, theme);\n\n  if (canUseDom()) {\n    updateCSS(style, dynamicStyleMark + \"-dynamic-theme\");\n  } else {\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'ConfigProvider', 'SSR do not support dynamic theme with css variables.') : void 0;\n  }\n}","map":{"version":3,"sources":["E:/railway/expressjs-mongoose/frontend/node_modules/antd/es/config-provider/cssVariables.js"],"names":["generate","TinyColor","canUseDom","updateCSS","warning","dynamicStyleMark","Date","now","Math","random","getStyle","globalPrefixCls","theme","variables","formatColor","color","updater","clone","toRgbString","fillColor","colorVal","type","baseColor","colorPalettes","setAlpha","primaryColor","primaryColors","forEach","index","c","lighten","tint","getAlpha","primaryActiveColor","darken","successColor","warningColor","errorColor","infoColor","cssList","Object","keys","map","key","join","trim","registerTheme","style","process","env","NODE_ENV"],"mappings":"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","sourcesContent":["/* eslint-disable import/prefer-default-export, prefer-destructuring */\nimport { generate } from '@ant-design/colors';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport canUseDom from \"rc-util/es/Dom/canUseDom\";\nimport { updateCSS } from \"rc-util/es/Dom/dynamicCSS\";\nimport warning from '../_util/warning';\nvar dynamicStyleMark = \"-ant-\" + Date.now() + \"-\" + Math.random();\nexport function getStyle(globalPrefixCls, theme) {\n  var variables = {};\n  var formatColor = function formatColor(color, updater) {\n    var clone = color.clone();\n    clone = (updater === null || updater === void 0 ? void 0 : updater(clone)) || clone;\n    return clone.toRgbString();\n  };\n  var fillColor = function fillColor(colorVal, type) {\n    var baseColor = new TinyColor(colorVal);\n    var colorPalettes = generate(baseColor.toRgbString());\n    variables[type + \"-color\"] = formatColor(baseColor);\n    variables[type + \"-color-disabled\"] = colorPalettes[1];\n    variables[type + \"-color-hover\"] = colorPalettes[4];\n    variables[type + \"-color-active\"] = colorPalettes[6];\n    variables[type + \"-color-outline\"] = baseColor.clone().setAlpha(0.2).toRgbString();\n    variables[type + \"-color-deprecated-bg\"] = colorPalettes[0];\n    variables[type + \"-color-deprecated-border\"] = colorPalettes[2];\n  };\n  // ================ Primary Color ================\n  if (theme.primaryColor) {\n    fillColor(theme.primaryColor, 'primary');\n    var primaryColor = new TinyColor(theme.primaryColor);\n    var primaryColors = generate(primaryColor.toRgbString());\n    // Legacy - We should use semantic naming standard\n    primaryColors.forEach(function (color, index) {\n      variables[\"primary-\" + (index + 1)] = color;\n    });\n    // Deprecated\n    variables['primary-color-deprecated-l-35'] = formatColor(primaryColor, function (c) {\n      return c.lighten(35);\n    });\n    variables['primary-color-deprecated-l-20'] = formatColor(primaryColor, function (c) {\n      return c.lighten(20);\n    });\n    variables['primary-color-deprecated-t-20'] = formatColor(primaryColor, function (c) {\n      return c.tint(20);\n    });\n    variables['primary-color-deprecated-t-50'] = formatColor(primaryColor, function (c) {\n      return c.tint(50);\n    });\n    variables['primary-color-deprecated-f-12'] = formatColor(primaryColor, function (c) {\n      return c.setAlpha(c.getAlpha() * 0.12);\n    });\n    var primaryActiveColor = new TinyColor(primaryColors[0]);\n    variables['primary-color-active-deprecated-f-30'] = formatColor(primaryActiveColor, function (c) {\n      return c.setAlpha(c.getAlpha() * 0.3);\n    });\n    variables['primary-color-active-deprecated-d-02'] = formatColor(primaryActiveColor, function (c) {\n      return c.darken(2);\n    });\n  }\n  // ================ Success Color ================\n  if (theme.successColor) {\n    fillColor(theme.successColor, 'success');\n  }\n  // ================ Warning Color ================\n  if (theme.warningColor) {\n    fillColor(theme.warningColor, 'warning');\n  }\n  // ================= Error Color =================\n  if (theme.errorColor) {\n    fillColor(theme.errorColor, 'error');\n  }\n  // ================= Info Color ==================\n  if (theme.infoColor) {\n    fillColor(theme.infoColor, 'info');\n  }\n  // Convert to css variables\n  var cssList = Object.keys(variables).map(function (key) {\n    return \"--\" + globalPrefixCls + \"-\" + key + \": \" + variables[key] + \";\";\n  });\n  return (\"\\n  :root {\\n    \" + cssList.join('\\n') + \"\\n  }\\n  \").trim();\n}\nexport function registerTheme(globalPrefixCls, theme) {\n  var style = getStyle(globalPrefixCls, theme);\n  if (canUseDom()) {\n    updateCSS(style, dynamicStyleMark + \"-dynamic-theme\");\n  } else {\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'ConfigProvider', 'SSR do not support dynamic theme with css variables.') : void 0;\n  }\n}"]},"metadata":{},"sourceType":"module"}