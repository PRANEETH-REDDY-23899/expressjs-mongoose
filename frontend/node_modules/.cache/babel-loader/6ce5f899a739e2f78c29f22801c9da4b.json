{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { TinyColor } from '@ctrl/tinycolor';\nexport default function genColorMapToken(seed, _ref) {\n  var generateColorPalettes = _ref.generateColorPalettes,\n      generateNeutralColorPalettes = _ref.generateNeutralColorPalettes;\n  var colorSuccessBase = seed.colorSuccess,\n      colorWarningBase = seed.colorWarning,\n      colorErrorBase = seed.colorError,\n      colorInfoBase = seed.colorInfo,\n      colorPrimaryBase = seed.colorPrimary,\n      colorBgBase = seed.colorBgBase,\n      colorTextBase = seed.colorTextBase;\n  var primaryColors = generateColorPalettes(colorPrimaryBase);\n  var successColors = generateColorPalettes(colorSuccessBase);\n  var warningColors = generateColorPalettes(colorWarningBase);\n  var errorColors = generateColorPalettes(colorErrorBase);\n  var infoColors = generateColorPalettes(colorInfoBase);\n  var neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase);\n  return _extends(_extends({}, neutralColors), {\n    colorPrimaryBg: primaryColors[1],\n    colorPrimaryBgHover: primaryColors[2],\n    colorPrimaryBorder: primaryColors[3],\n    colorPrimaryBorderHover: primaryColors[4],\n    colorPrimaryHover: primaryColors[5],\n    colorPrimary: primaryColors[6],\n    colorPrimaryActive: primaryColors[7],\n    colorPrimaryTextHover: primaryColors[8],\n    colorPrimaryText: primaryColors[9],\n    colorPrimaryTextActive: primaryColors[10],\n    colorSuccessBg: successColors[1],\n    colorSuccessBgHover: successColors[2],\n    colorSuccessBorder: successColors[3],\n    colorSuccessBorderHover: successColors[4],\n    colorSuccessHover: successColors[4],\n    colorSuccess: successColors[6],\n    colorSuccessActive: successColors[7],\n    colorSuccessTextHover: successColors[8],\n    colorSuccessText: successColors[9],\n    colorSuccessTextActive: successColors[10],\n    colorErrorBg: errorColors[1],\n    colorErrorBgHover: errorColors[2],\n    colorErrorBorder: errorColors[3],\n    colorErrorBorderHover: errorColors[4],\n    colorErrorHover: errorColors[4],\n    colorError: errorColors[5],\n    colorErrorActive: errorColors[7],\n    colorErrorTextHover: errorColors[8],\n    colorErrorText: errorColors[9],\n    colorErrorTextActive: errorColors[10],\n    colorWarningBg: warningColors[1],\n    colorWarningBgHover: warningColors[2],\n    colorWarningBorder: warningColors[3],\n    colorWarningBorderHover: warningColors[4],\n    colorWarningHover: warningColors[4],\n    colorWarning: warningColors[6],\n    colorWarningActive: warningColors[7],\n    colorWarningTextHover: warningColors[8],\n    colorWarningText: warningColors[9],\n    colorWarningTextActive: warningColors[10],\n    colorInfoBg: infoColors[1],\n    colorInfoBgHover: infoColors[2],\n    colorInfoBorder: infoColors[3],\n    colorInfoBorderHover: infoColors[4],\n    colorInfoHover: infoColors[4],\n    colorInfo: infoColors[6],\n    colorInfoActive: infoColors[7],\n    colorInfoTextHover: infoColors[8],\n    colorInfoText: infoColors[9],\n    colorInfoTextActive: infoColors[10],\n    colorBgMask: new TinyColor('#000').setAlpha(0.45).toRgbString(),\n    colorWhite: '#fff'\n  });\n}","map":{"version":3,"sources":["E:/railway/expressjs-mongoose/frontend/node_modules/antd/es/theme/themes/shared/genColorMapToken.js"],"names":["_extends","TinyColor","genColorMapToken","seed","_ref","generateColorPalettes","generateNeutralColorPalettes","colorSuccessBase","colorSuccess","colorWarningBase","colorWarning","colorErrorBase","colorError","colorInfoBase","colorInfo","colorPrimaryBase","colorPrimary","colorBgBase","colorTextBase","primaryColors","successColors","warningColors","errorColors","infoColors","neutralColors","colorPrimaryBg","colorPrimaryBgHover","colorPrimaryBorder","colorPrimaryBorderHover","colorPrimaryHover","colorPrimaryActive","colorPrimaryTextHover","colorPrimaryText","colorPrimaryTextActive","colorSuccessBg","colorSuccessBgHover","colorSuccessBorder","colorSuccessBorderHover","colorSuccessHover","colorSuccessActive","colorSuccessTextHover","colorSuccessText","colorSuccessTextActive","colorErrorBg","colorErrorBgHover","colorErrorBorder","colorErrorBorderHover","colorErrorHover","colorErrorActive","colorErrorTextHover","colorErrorText","colorErrorTextActive","colorWarningBg","colorWarningBgHover","colorWarningBorder","colorWarningBorderHover","colorWarningHover","colorWarningActive","colorWarningTextHover","colorWarningText","colorWarningTextActive","colorInfoBg","colorInfoBgHover","colorInfoBorder","colorInfoBorderHover","colorInfoHover","colorInfoActive","colorInfoTextHover","colorInfoText","colorInfoTextActive","colorBgMask","setAlpha","toRgbString","colorWhite"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { TinyColor } from '@ctrl/tinycolor';\nexport default function genColorMapToken(seed, _ref) {\n  var generateColorPalettes = _ref.generateColorPalettes,\n    generateNeutralColorPalettes = _ref.generateNeutralColorPalettes;\n  var colorSuccessBase = seed.colorSuccess,\n    colorWarningBase = seed.colorWarning,\n    colorErrorBase = seed.colorError,\n    colorInfoBase = seed.colorInfo,\n    colorPrimaryBase = seed.colorPrimary,\n    colorBgBase = seed.colorBgBase,\n    colorTextBase = seed.colorTextBase;\n  var primaryColors = generateColorPalettes(colorPrimaryBase);\n  var successColors = generateColorPalettes(colorSuccessBase);\n  var warningColors = generateColorPalettes(colorWarningBase);\n  var errorColors = generateColorPalettes(colorErrorBase);\n  var infoColors = generateColorPalettes(colorInfoBase);\n  var neutralColors = generateNeutralColorPalettes(colorBgBase, colorTextBase);\n  return _extends(_extends({}, neutralColors), {\n    colorPrimaryBg: primaryColors[1],\n    colorPrimaryBgHover: primaryColors[2],\n    colorPrimaryBorder: primaryColors[3],\n    colorPrimaryBorderHover: primaryColors[4],\n    colorPrimaryHover: primaryColors[5],\n    colorPrimary: primaryColors[6],\n    colorPrimaryActive: primaryColors[7],\n    colorPrimaryTextHover: primaryColors[8],\n    colorPrimaryText: primaryColors[9],\n    colorPrimaryTextActive: primaryColors[10],\n    colorSuccessBg: successColors[1],\n    colorSuccessBgHover: successColors[2],\n    colorSuccessBorder: successColors[3],\n    colorSuccessBorderHover: successColors[4],\n    colorSuccessHover: successColors[4],\n    colorSuccess: successColors[6],\n    colorSuccessActive: successColors[7],\n    colorSuccessTextHover: successColors[8],\n    colorSuccessText: successColors[9],\n    colorSuccessTextActive: successColors[10],\n    colorErrorBg: errorColors[1],\n    colorErrorBgHover: errorColors[2],\n    colorErrorBorder: errorColors[3],\n    colorErrorBorderHover: errorColors[4],\n    colorErrorHover: errorColors[4],\n    colorError: errorColors[5],\n    colorErrorActive: errorColors[7],\n    colorErrorTextHover: errorColors[8],\n    colorErrorText: errorColors[9],\n    colorErrorTextActive: errorColors[10],\n    colorWarningBg: warningColors[1],\n    colorWarningBgHover: warningColors[2],\n    colorWarningBorder: warningColors[3],\n    colorWarningBorderHover: warningColors[4],\n    colorWarningHover: warningColors[4],\n    colorWarning: warningColors[6],\n    colorWarningActive: warningColors[7],\n    colorWarningTextHover: warningColors[8],\n    colorWarningText: warningColors[9],\n    colorWarningTextActive: warningColors[10],\n    colorInfoBg: infoColors[1],\n    colorInfoBgHover: infoColors[2],\n    colorInfoBorder: infoColors[3],\n    colorInfoBorderHover: infoColors[4],\n    colorInfoHover: infoColors[4],\n    colorInfo: infoColors[6],\n    colorInfoActive: infoColors[7],\n    colorInfoTextHover: infoColors[8],\n    colorInfoText: infoColors[9],\n    colorInfoTextActive: infoColors[10],\n    colorBgMask: new TinyColor('#000').setAlpha(0.45).toRgbString(),\n    colorWhite: '#fff'\n  });\n}"]},"metadata":{},"sourceType":"module"}