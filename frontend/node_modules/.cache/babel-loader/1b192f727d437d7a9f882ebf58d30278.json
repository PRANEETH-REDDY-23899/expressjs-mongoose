{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useEvent from './useEvent';\nimport useLayoutEffect, { useLayoutUpdateEffect } from './useLayoutEffect';\nimport useState from './useState';\nvar Source;\n\n(function (Source) {\n  Source[Source[\"INNER\"] = 0] = \"INNER\";\n  Source[Source[\"PROP\"] = 1] = \"PROP\";\n})(Source || (Source = {}));\n/** We only think `undefined` is empty */\n\n\nfunction hasValue(value) {\n  return value !== undefined;\n}\n/**\n * Similar to `useState` but will use props value if provided.\n * Note that internal use rc-util `useState` hook.\n */\n\n\nexport default function useMergedState(defaultStateValue, option) {\n  var _ref = option || {},\n      defaultValue = _ref.defaultValue,\n      value = _ref.value,\n      onChange = _ref.onChange,\n      postState = _ref.postState; // ======================= Init =======================\n\n\n  var _useState = useState(function () {\n    var finalValue = undefined;\n    var source;\n\n    if (hasValue(value)) {\n      finalValue = value;\n      source = Source.PROP;\n    } else if (hasValue(defaultValue)) {\n      finalValue = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n      source = Source.PROP;\n    } else {\n      finalValue = typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;\n      source = Source.INNER;\n    }\n\n    return [finalValue, source, finalValue];\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      mergedValue = _useState2[0],\n      setMergedValue = _useState2[1];\n\n  var chosenValue = hasValue(value) ? value : mergedValue[0];\n  var postMergedValue = postState ? postState(chosenValue) : chosenValue; // ======================= Sync =======================\n\n  useLayoutUpdateEffect(function () {\n    setMergedValue(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 1),\n          prevValue = _ref3[0];\n\n      return [value, Source.PROP, prevValue];\n    });\n  }, [value]); // ====================== Update ======================\n\n  var changeEventPrevRef = React.useRef();\n  var triggerChange = useEvent(function (updater, ignoreDestroy) {\n    setMergedValue(function (prev) {\n      var _prev = _slicedToArray(prev, 3),\n          prevValue = _prev[0],\n          prevSource = _prev[1],\n          prevPrevValue = _prev[2];\n\n      var nextValue = typeof updater === 'function' ? updater(prevValue) : updater; // Do nothing if value not change\n\n      if (nextValue === prevValue) {\n        return prev;\n      } // Use prev prev value if is in a batch update to avoid missing data\n\n\n      var overridePrevValue = prevSource === Source.INNER && changeEventPrevRef.current !== prevPrevValue ? prevPrevValue : prevValue;\n      return [nextValue, Source.INNER, overridePrevValue];\n    }, ignoreDestroy);\n  }); // ====================== Change ======================\n\n  var onChangeFn = useEvent(onChange);\n  useLayoutEffect(function () {\n    var _mergedValue = _slicedToArray(mergedValue, 3),\n        current = _mergedValue[0],\n        source = _mergedValue[1],\n        prev = _mergedValue[2];\n\n    if (current !== prev && source === Source.INNER) {\n      onChangeFn(current, prev);\n      changeEventPrevRef.current = prev;\n    }\n  }, [mergedValue]);\n  return [postMergedValue, triggerChange];\n}","map":{"version":3,"sources":["E:/railway/expressjs-mongoose/frontend/node_modules/rc-util/es/hooks/useMergedState.js"],"names":["_slicedToArray","React","useEvent","useLayoutEffect","useLayoutUpdateEffect","useState","Source","hasValue","value","undefined","useMergedState","defaultStateValue","option","_ref","defaultValue","onChange","postState","_useState","finalValue","source","PROP","INNER","_useState2","mergedValue","setMergedValue","chosenValue","postMergedValue","_ref2","_ref3","prevValue","changeEventPrevRef","useRef","triggerChange","updater","ignoreDestroy","prev","_prev","prevSource","prevPrevValue","nextValue","overridePrevValue","current","onChangeFn","_mergedValue"],"mappings":"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","sourcesContent":["import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport useEvent from './useEvent';\nimport useLayoutEffect, { useLayoutUpdateEffect } from './useLayoutEffect';\nimport useState from './useState';\nvar Source;\n(function (Source) {\n  Source[Source[\"INNER\"] = 0] = \"INNER\";\n  Source[Source[\"PROP\"] = 1] = \"PROP\";\n})(Source || (Source = {}));\n/** We only think `undefined` is empty */\nfunction hasValue(value) {\n  return value !== undefined;\n}\n/**\n * Similar to `useState` but will use props value if provided.\n * Note that internal use rc-util `useState` hook.\n */\nexport default function useMergedState(defaultStateValue, option) {\n  var _ref = option || {},\n    defaultValue = _ref.defaultValue,\n    value = _ref.value,\n    onChange = _ref.onChange,\n    postState = _ref.postState;\n  // ======================= Init =======================\n  var _useState = useState(function () {\n      var finalValue = undefined;\n      var source;\n      if (hasValue(value)) {\n        finalValue = value;\n        source = Source.PROP;\n      } else if (hasValue(defaultValue)) {\n        finalValue = typeof defaultValue === 'function' ? defaultValue() : defaultValue;\n        source = Source.PROP;\n      } else {\n        finalValue = typeof defaultStateValue === 'function' ? defaultStateValue() : defaultStateValue;\n        source = Source.INNER;\n      }\n      return [finalValue, source, finalValue];\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    mergedValue = _useState2[0],\n    setMergedValue = _useState2[1];\n  var chosenValue = hasValue(value) ? value : mergedValue[0];\n  var postMergedValue = postState ? postState(chosenValue) : chosenValue;\n  // ======================= Sync =======================\n  useLayoutUpdateEffect(function () {\n    setMergedValue(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 1),\n        prevValue = _ref3[0];\n      return [value, Source.PROP, prevValue];\n    });\n  }, [value]);\n  // ====================== Update ======================\n  var changeEventPrevRef = React.useRef();\n  var triggerChange = useEvent(function (updater, ignoreDestroy) {\n    setMergedValue(function (prev) {\n      var _prev = _slicedToArray(prev, 3),\n        prevValue = _prev[0],\n        prevSource = _prev[1],\n        prevPrevValue = _prev[2];\n      var nextValue = typeof updater === 'function' ? updater(prevValue) : updater;\n      // Do nothing if value not change\n      if (nextValue === prevValue) {\n        return prev;\n      }\n      // Use prev prev value if is in a batch update to avoid missing data\n      var overridePrevValue = prevSource === Source.INNER && changeEventPrevRef.current !== prevPrevValue ? prevPrevValue : prevValue;\n      return [nextValue, Source.INNER, overridePrevValue];\n    }, ignoreDestroy);\n  });\n  // ====================== Change ======================\n  var onChangeFn = useEvent(onChange);\n  useLayoutEffect(function () {\n    var _mergedValue = _slicedToArray(mergedValue, 3),\n      current = _mergedValue[0],\n      source = _mergedValue[1],\n      prev = _mergedValue[2];\n    if (current !== prev && source === Source.INNER) {\n      onChangeFn(current, prev);\n      changeEventPrevRef.current = prev;\n    }\n  }, [mergedValue]);\n  return [postMergedValue, triggerChange];\n}"]},"metadata":{},"sourceType":"module"}